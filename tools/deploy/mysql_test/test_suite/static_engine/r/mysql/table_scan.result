result_format: 4
explain_protocol: 0

drop table if exists t1;
create table t1 (c1 number, c2 number, c3 char(20), c4 varchar(20), primary key(c1, c2), index i1 (c2));

insert into t1 (c1, c2, c3, c4) values (1, 2, 'a', 'b');
insert into t1 (c1, c2, c3, c4) values (3, 4, 'c', 'd');
insert into t1 (c1, c2, c3, c4) values (5, 1, 'xx', 'yy');
insert into t1 (c1, c2, c3, c4) values (5, 2, 'xx', 'yy');
insert into t1 (c1, c2, c3, c4) values (7, 5, 'xx1', 'yy2');
insert into t1 (c1, c2, c3, c4) values (7, 6, 'xx1', 'yy2');
insert into t1 (c1, c2, c3, c4) values (8, 7, 'xx1', 'yy2');

alter table t1 add column c5 varchar(20) default 'c5_default';



set @@ob_enable_plan_cache = 0;
explain_protocol: 2
EXPLAIN select * from t1;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |7        |38  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter(nil), 
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)

select * from t1;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  1 |  2 | a    | b    | c5_default |
|  3 |  4 | c    | d    | c5_default |
|  5 |  1 | xx   | yy   | c5_default |
|  5 |  2 | xx   | yy   | c5_default |
|  7 |  5 | xx1  | yy2  | c5_default |
|  7 |  6 | xx1  | yy2  | c5_default |
|  8 |  7 | xx1  | yy2  | c5_default |
+----+----+------+------+------------+
EXPLAIN select * from t1 order by c1 desc, c2 desc;
Query Plan
==========================================
|ID|OPERATOR  |NAME       |EST. ROWS|COST|
------------------------------------------
|0 |TABLE SCAN|t1(Reverse)|7        |38  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter(nil), 
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)

select * from t1 order by c1 desc, c2 desc;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  8 |  7 | xx1  | yy2  | c5_default |
|  7 |  6 | xx1  | yy2  | c5_default |
|  7 |  5 | xx1  | yy2  | c5_default |
|  5 |  2 | xx   | yy   | c5_default |
|  5 |  1 | xx   | yy   | c5_default |
|  3 |  4 | c    | d    | c5_default |
|  1 |  2 | a    | b    | c5_default |
+----+----+------+------+------------+
EXPLAIN select * from t1 where c1 + c2 < 10;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |3        |39  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter([t1.c1 + t1.c2 < ?]), 
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)

select * from t1 where c1 + c2 < 10;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  1 |  2 | a    | b    | c5_default |
|  3 |  4 | c    | d    | c5_default |
|  5 |  1 | xx   | yy   | c5_default |
|  5 |  2 | xx   | yy   | c5_default |
+----+----+------+------+------------+
EXPLAIN select * from t1 limit 2;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |2        |37  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter(nil), 
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0), 
      limit(2), offset(nil)

select * from t1 limit 2;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  1 |  2 | a    | b    | c5_default |
|  3 |  4 | c    | d    | c5_default |
+----+----+------+------+------------+
EXPLAIN select * from t1 where c1 = 5;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |2        |37  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter(nil), 
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)

select * from t1 where c1 = 5;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  5 |  1 | xx   | yy   | c5_default |
|  5 |  2 | xx   | yy   | c5_default |
+----+----+------+------+------------+
EXPLAIN select * from t1 where c1 = 5 or c1 = 7;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |4        |37  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter(nil), 
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)

select * from t1 where c1 = 5 or c1 = 7;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  5 |  1 | xx   | yy   | c5_default |
|  5 |  2 | xx   | yy   | c5_default |
|  7 |  5 | xx1  | yy2  | c5_default |
|  7 |  6 | xx1  | yy2  | c5_default |
+----+----+------+------+------------+
EXPLAIN select * from t1 where (c1 = 2 and c2 = 4) or (c1 = 7 and c2 = 5) or (c1 = 8 and c2 = 7);
Query Plan
==================================
|ID|OPERATOR |NAME|EST. ROWS|COST|
----------------------------------
|0 |TABLE GET|t1  |3        |63  |
==================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter(nil), 
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)

select * from t1 where (c1 = 2 and c2 = 4) or (c1 = 7 and c2 = 5) or (c1 = 8 and c2 = 7);
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  7 |  5 | xx1  | yy2  | c5_default |
|  8 |  7 | xx1  | yy2  | c5_default |
+----+----+------+------+------------+

EXPLAIN select * from t1 where c2  = 2 and c1 + c2 < 10 and c4 > c3;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t1(i1)|1        |88  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter([t1.c1 + t1.c2 < ?], [t1.c4 > t1.c3]), 
      access([t1.c2], [t1.c1], [t1.c4], [t1.c3], [t1.c5]), partitions(p0)

select * from t1 where c2  = 2 and c1 + c2 < 10 and c4 > c3;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  1 |  2 | a    | b    | c5_default |
|  5 |  2 | xx   | yy   | c5_default |
+----+----+------+------+------------+

EXPLAIN select c1, c2 from t1 where c2 > 4;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t1(i1)|3        |37  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c2], [t1.c1]), partitions(p0)

select c1, c2 from t1 where c2 > 4;
+----+----+
| c1 | c2 |
+----+----+
|  7 |  5 |
|  7 |  6 |
|  8 |  7 |
+----+----+

***** test index back
drop table t1;
create table t1(c1 int primary key, c2 int, c3 int, index idx(c2));
EXPLAIN insert into t1 values(1,1,1), (2,2,2), (3,3,3), (4,4,4),(5,5,5), (6,6,6), (7,7,7);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |INSERT     |    |7        |2   |
|1 | EXPRESSION|    |7        |1   |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([column_conv(INT,PS:(11,0),NOT NULL,__values.c1)], [column_conv(INT,PS:(11,0),NULL,__values.c2)], [column_conv(INT,PS:(11,0),NULL,__values.c3)]), filter(nil), 
      columns([{t1: ({t1: (t1.c1, t1.c2, t1.c3)})}]), partitions(p0)
  1 - output([__values.c1], [__values.c2], [__values.c3]), filter(nil)
      values({1, 1, 1}, {2, 2, 2}, {3, 3, 3}, {4, 4, 4}, {5, 5, 5}, {6, 6, 6}, {7, 7, 7})

insert into t1 values(1,1,1), (2,2,2), (3,3,3), (4,4,4),(5,5,5), (6,6,6), (7,7,7);


# case 1: index back with before_index_back_filter
EXPLAIN select /*+index(t1 idx)*/ c1, c2, c3 from t1 where c2 > 1 and  c1 <  4;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t1(idx)|1        |88  |
======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3]), filter([t1.c1 < 4]), 
      access([t1.c2], [t1.c1], [t1.c3]), partitions(p0)

select /*+index(t1 idx)*/ c1, c2, c3 from t1 where c2 > 1 and  c1 <  4;
+----+------+------+
| c1 | c2   | c3   |
+----+------+------+
|  2 |    2 |    2 |
|  3 |    3 |    3 |
+----+------+------+


# case 2: index back without before_index_back_filter
EXPLAIN select /*+index(t1 idx)*/ c1, c2, c3 from t1 where c2 > 1 and  c3 <  4;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t1(idx)|1        |116 |
======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3]), filter([t1.c3 < 4]), 
      access([t1.c2], [t1.c3], [t1.c1]), partitions(p0)

select /*+index(t1 idx)*/ c1, c2, c3 from t1 where c2 > 1 and  c3 <  4;
+----+------+------+
| c1 | c2   | c3   |
+----+------+------+
|  2 |    2 |    2 |
|  3 |    3 |    3 |
+----+------+------+

EXPLAIN select /*+index(t1 idx)*/ c1, c2, c3 from t1 where c3 != 1 limit 2;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t1(idx)|2        |96  |
======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3]), filter([t1.c3 != 1]), 
      access([t1.c3], [t1.c1], [t1.c2]), partitions(p0), 
      limit(2), offset(nil)

select /*+index(t1 idx)*/ c1, c2, c3 from t1 where c3 != 1 limit 2;
+----+------+------+
| c1 | c2   | c3   |
+----+------+------+
|  2 |    2 |    2 |
|  3 |    3 |    3 |
+----+------+------+

drop table t1;
